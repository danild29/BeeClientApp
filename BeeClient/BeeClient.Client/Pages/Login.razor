@page "/user/login"
@using Newtonsoft.Json
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserData userData
@inject IAlertService AlertService
@inject LogWriter log
@inject JavascriptHelper jsHelper
<div>
    @foreach (var message in messages)
    {
        @message
    }
</div>


<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="user" OnValidSubmit="HandleSubmit" FormName="user-login">
            <DataAnnotationsValidator />
            
            
            <div class="form-group">
                <LabelFor For="@(() => user.Email)" />
                <InputText @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="form-group">
                <LabelFor For="@(() => user.Password)" />
                <InputText @bind-Value="user.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>

            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="user/register" class="btn btn-link">Register</NavLink>
            <input type="checkbox"  @bind="@save" >
            <input rememver me />
        </EditForm>
    </div>
</div>



@code {

    UserAccount user = new("", "");
    private bool loading;
    private bool save = false;
    private List<string> messages = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {


            Result<UserModel> result = await userData.CheckIfAlredyLogged();
            result.Match(u =>
            {
                Navigation.NavigateTo("companies/my");
            }, error =>
            {
                CompanyError validation = error.ParseTo<CompanyError>();
                messages.Add(validation?.Detail);
                StateHasChanged();
            });
        }
    }

    private async Task HandleSubmit()
    {
        // reset alerts on submit
        ///AlertService.Clear();

        loading = true;
        try
        {
            await userData.ToggleRemember(save);


            Result<TokenModel> token = await userData.TokenData.GetToken(user);

            await token.Match(async x =>
                {
                    var me = await userData.GetMe(x.access);
                    Navigation.NavigateTo("companies/my");
                    //AlertService.Success("Registration successful", keepAfterRouteChange: true);
                },
                async error =>
                {
                    var valid = ValidationModel.GetValidation(error);

                    messages = valid.GetAllErrors().ToList();
                }
            );

        }
        catch (Exception ex)
        {
            throw;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
}
